

//
//int t1 = 8;
//int t2 = 9;

int datapin = 3; //green
int clockpin = 5; //white
int latchpin = 4; //brown
//int outputEnablePin = 3;

//    unsigned long data[1] = {0b100000000000000000000001};

//    unsigned long data[2] = {
//      0b000000111111111111111111,
//      0b111111000000111111111111
//      };
  
//    unsigned long data[24] = {
//      0b000000111111000000000001,
//      0b111111000000000000000001,
//      
//      0b000000111111000000000010,
//      0b111111000000000000000010,
//      
//      0b000000111111000000000100,
//      0b111111000000000000000100,
//      
//      0b000000111111000000001000,
//      0b111111000000000000001000,
//      
//      0b000000111111000000010000,
//      0b111111000000000000010000,
//      
//      0b000000111111000000100000,
//      0b111111000000000000100000,
//      
//      0b000000111111000001000000,
//      0b111111000000000001000000,
//      
//      0b000000111111000010000000,
//      0b111111000000000010000000,
//      
//      0b000000111111000100000000,
//      0b111111000000000100000000,
//      
//      0b000000111111001000000000,
//      0b111111000000001000000000,
//      
//      0b000000111111010000000000,
//      0b111111000000010000000000,
//      
//      0b000000111111100000000000,
//      0b111111000000100000000000,
//      
//      };    
      
      
//    unsigned long data[26] = {
//      
//      0b000000000000111111000000,
//      0b000000000000111111000000,
//      
//      0b100000000000111111000000,
//      0b100000000000111111000000,
//      
//      0b110000000000111111000000,
//      0b110000000000111111000000,
//      
//      0b111000000000111111000000,
//      0b111000000000111111000000,
//      
//      0b111100000000111111000000,
//      0b111100000000111111000000,
//      
//      0b111110000000111111000000,
//      0b111110000000111111000000,
//      
//      0b111111000000111111000000,
//      0b111111000000111111000000,
//      
//      0b000000100000111111000000,
//      0b111111000000111111000000,
//      
//      0b000000110000111111000000,
//      0b111111000000111111000000,
//      
//      0b000000111000111111000000,
//      0b111111000000111111000000,
//      
//      0b000000111100111111000000,
//      0b111111000000111111000000,
//      
//      0b000000111110111111000000,
//      0b111111000000111111000000,
//      
//      0b000000111111111111000000,
//      0b111111000000111111000000,
// 
//      
//      }; 

//      unsigned long data[] = {
//      
//      
//      0b110000000000000000111111,
//      0b110000000000000000111111,
//      0b100000000000111111000000,
//      0b100000000000111111000000,
//      
//      0b111100000000000000111111,
//      0b111100000000000000111111,
//      0b110000000000111111000000,
//      0b110000000000111111000000,
//      
//      0b111111000000000000111111,
//      0b111111000000000000111111,
//      0b111000000000111111000000,
//      0b111000000000111111000000,
//      
//      0b111111000000000000111111,
//      0b000000110000000000111111,
//      0b111100000000111111000000,
//      0b111100000000111111000000,
//      
//      0b111111000000000000111111,
//      0b000000111100000000111111,
//      0b111110000000111111000000,
//      0b111110000000111111000000,
//      
//      0b111111000000000000111111,
//      0b000000111111000000111111,
//      0b111111000000111111000000,
//      0b111111000000111111000000,
//
//      
//      
//      
//      
//      
//      
//      
//      
//      
//      
//      
//      0b111111000000111111000000,
//      0b000000100000111111000000,
//      0b110000000000000000111111,
//      0b110000000000000000111111,
//      
//      
//      0b111111000000111111000000,
//      0b000000110000111111000000,
//      0b111100000000000000111111,
//      0b111100000000000000111111,
//      
//      
//      0b111111000000111111000000,
//      0b000000111000111111000000,
//      0b111111000000000000111111,
//      0b000000111000000000111111,
//      
//      
//      
//      
//      
//      
//      
//      0b000000110000000000111111,
//      0b000000111100111111000000,
//      0b111111000000111111111111,
//      0b111111000000111111111111,
//      
//      0b000000111100000000111111,
//      0b000000111110111111000000,
//      0b111111000000111111111111,
//      0b111111000000111111111111,
//      
//      0b000000111111000000111111,
//      0b000000111111111111000000,
//      0b111111000000111111111111,
//      0b111111000000111111111111,
//
//      
//      
//      
//      }; 

  
  
        unsigned long data[] = {
      
      
      0b110000000000000000000011, //q 1
      0b110000000000000000000011, //q
      0b100000000000000011000000, //s
      0b100000000000000011000000, //s
      
      0b111100000000000000000011, //q 1
      0b111100000000000000000011, //q
      0b110000000000000011000000, //s
      0b110000000000000011000000, //s 
      
      0b111111000000000000000011, //q 1
      0b111111000000000000000011, //q
      0b111000000000000011000000, //s
      0b111000000000000011000000, //s 
      
      0b111111000000000000000110, //q 2
      0b000000110000000000000110, //q
      0b111100000000000110000000, //s
      0b111100000000000110000000, //s 
      
      0b111111000000000000000110, //q 2
      0b000000111100000000000110, //q
      0b111110000000000110000000, //s
      0b111110000000000110000000, //s
      
      0b111111000000000000000110, //q 2
      0b000000111111000000000110, //q
      0b111111000000000110000000, //s
      0b111111000000000110000000, //s

      0b111111000000001100000000, //s 3
      0b000000100000001100000000, //s
      0b110000000000000000001100, //q
      0b110000000000000000001100, //q
      
      
      0b111111000000001100000000, //s 3
      0b000000110000001100000000, //s
      0b111100000000000000001100, //q
      0b111100000000000000001100, //q
      
      
      0b111111000000001100000000, //s 3
      0b000000111000001100000000, //s
      0b111111000000000000001100, //q
      0b111111000000000000001100, //q
      
      
      

      0b000000110000000000011000, //q 4
      0b000000111100011000000000, //s
      0b111111000000011000011000, //s and q on bottom
      0b111111000000011000011000, //s and q on bottom
      
      0b000000111100000000011000, //q 4
      0b000000111110011000000000, //s
      0b111111000000011000011000, //s and q on bottom
      0b111111000000011000011000, //s and q on bottom
      
      0b000000111111000000011000, //q 4
      0b000000111111011000000000, //s
      0b111111000000011000011000, //s and q on bottom
      0b111111000000011000011000, //s and q on bottom
     

      
      
      
      ////////////////////
      
      0b110000000000000000110000, //q 1
      0b110000000000000000110000, //q
      0b100000000000110000000000, //s
      0b100000000000110000000000, //s
      
      0b111100000000000000110000, //q 1
      0b111100000000000000110000, //q
      0b110000000000110000000000, //s
      0b110000000000110000000000, //s 
      
      0b111111000000000000110000, //q 1
      0b111111000000000000110000, //q
      0b111000000000110000000000, //s
      0b111000000000110000000000, //s 
      
      0b111111000000000001100000, //q 2
      0b000000110000000001100000, //q
      0b111100000000100000000001, //s
      0b111100000000100000000001, //s 
      
      0b111111000000000001100000, //q 2
      0b000000111100000001100000, //q
      0b111110000000100000000001, //s
      0b111110000000100000000001, //s
      
      0b111111000000000001100000, //q 2
      0b000000111111000001100000, //q
      0b111111000000100000000001, //s
      0b111111000000100000000001, //s



      0b111111000000000000000011, //s 3
      0b000000100000000000000011, //s
      0b110000000000000011000000, //q
      0b110000000000000011000000, //q
      
      
      0b111111000000000000000011, //s 3
      0b000000110000000000000011, //s
      0b111100000000000011000000, //q
      0b111100000000000011000000, //q
      
      
      0b111111000000000000000011, //s 3
      0b000000111000000000000011, //s
      0b111111000000000011000000, //q
      0b111111000000000011000000, //q
      
      
      

      0b000000110000000110000000, //q 4
      0b000000111100000000000110, //s
      0b111111000000000110000110, //s and q on bottom
      0b111111000000000110000110, //s and q on bottom
      
      0b000000111100000110000000, //q 4
      0b000000111110000000000110, //s
      0b111111000000000110000110, //s and q on bottom
      0b111111000000000110000110, //s and q on bottom
      
      0b000000111111000110000000, //q 4
      0b000000111111000000000110, //s
      0b111111000000000110000110, //s and q on bottom
      0b111111000000000110000110, //s and q on bottom









    ////////////




      0b110000000000001100000000, //q 1
      0b110000000000001100000000, //q
      0b100000000000000000001100, //s
      0b100000000000000000001100, //s
      
      0b111100000000001100000000, //q 1
      0b111100000000001100000000, //q
      0b110000000000000000001100, //s
      0b110000000000000000001100, //s 
      
      0b111111000000001100000000, //q 1
      0b111111000000001100000000, //q
      0b111000000000000000001100, //s
      0b111000000000000000001100, //s 
      
      0b111111000000011000000000, //q 2
      0b000000110000011000000000, //q
      0b111100000000000000011000, //s
      0b111100000000000000011000, //s 
      
      0b111111000000011000000000, //q 2
      0b000000111100011000000000, //q
      0b111110000000000000011000, //s
      0b111110000000000000011000, //s
      
      0b111111000000011000000000, //q 2
      0b000000111111011000000000, //q
      0b111111000000000000011000, //s
      0b111111000000000000011000, //s



      0b111111000000000000110000, //s 3
      0b000000100000000000110000, //s
      0b110000000000110000000000, //q
      0b110000000000110000000000, //q
      
      
      0b111111000000000000110000, //s 3
      0b000000110000000000110000, //s
      0b111100000000110000000000, //q
      0b111100000000110000000000, //q
      
      
      0b111111000000000000110000, //s 3
      0b000000111000000000110000, //s
      0b111111000000110000000000, //q
      0b111111000000110000000000, //q
      
      
      

      0b000000110000100000000001, //q 4
      0b000000111100000001100000, //s
      0b111111000000100001100001, //s and q on bottom
      0b111111000000100001100001, //s and q on bottom
      
      0b000000111100100000000001, //q 4
      0b000000111110000001100000, //s
      0b111111000000100001100001, //s and q on bottom
      0b111111000000100001100001, //s and q on bottom
      
      0b000000111111100000000001, //q 4
      0b000000111111000001100000, //s
      0b111111000000100001100001, //s and q on bottom
      0b111111000000100001100001, //s and q on bottom


      }; 
  
  
  
  
void setup()
{
  Serial.begin(9600);
  pinMode(datapin, OUTPUT);
  pinMode(clockpin, OUTPUT);  
  pinMode(latchpin, OUTPUT);
//  pinMode(outputEnablePin, OUTPUT);
//  
//  analogWrite(outputEnablePin, 250);
  
//  pinMode(t1, OUTPUT);
//  pinMode(t2, OUTPUT);  
//  digitalWrite(t1, HIGH);
//  digitalWrite(t2, HIGH);

  
}


void loop()
{
  
  manyOnAtATime();       // Scroll down the line
  
}


void shiftWrite(unsigned long desiredPins)
{
  
  shiftOut(datapin, clockpin, MSBFIRST, lowByte(desiredPins));
  shiftOut(datapin, clockpin, MSBFIRST, highByte(desiredPins));
  shiftOut(datapin, clockpin, MSBFIRST, highByte(desiredPins>>8));
  
  
  
  
//  shiftOut(datapin, clockpin, MSBFIRST, highByte(desiredPins>>8));
//  shiftOut(datapin, clockpin, MSBFIRST, highByte(desiredPins));
//  shiftOut(datapin, clockpin, MSBFIRST, lowByte(desiredPins));

  digitalWrite(latchpin, HIGH);
  digitalWrite(latchpin, LOW);
  
}



unsigned long twoToThePower(int n){
  unsigned long x = 1;
  for(unsigned long j = 0; j <n; j++){
     x = x*2; 
  }
  return x;
}

//void manyOnAtATime()
//{
//  unsigned long i;
//  int delayTime = 1;
//  
//  
//  for(i = 0; i <4; i++)
//  {
//    
//
//    shiftWrite(data[i]);
////    shiftWrite(twoToThePower(i));	// turn LEDs on
// 
//    delay(delayTime);		// pause to slow down the sequence	
//  }
//}



void manyOnAtATime()
{
  unsigned long i;
  int delayTime = 50;
  int c;
  
  for(i = 0; i <sizeof(data)/sizeof(long); i++)
//  for(i = 0; i <16; i++)
  {
    
    if (i % 4 == 0) {
      c = 0;
      for(int j = 0; j <delayTime; j++){
        
        //need to add here for 
//        if (j % 4 == 0){
//          shiftWrite(data[i]);
//        }
//        else {
//          shiftWrite(data[i+c]);
//        }
        
        shiftWrite(data[i+c]);
        
        c++;
        if (c==3){
        c = 0;
        }
        
        
        delay(1);
      //shift data of i and i+1
      //delay(1);
      //do this 1000 times
      
      }
    }

      

    
//    delay(delayTime);		// pause to slow down the sequence	
  }
}


